// import "intl";
// import "intl/locale-data/jsonp/en";

// import { KeyboardAvoidingView, Platform } from "react-native";
// import { TailwindProvider } from 'tailwindcss-react-native';

// import HomeNavigation from "./components/HomeNavigation";
// import { NavigationContainer } from "@react-navigation/native";
// import { Provider } from "react-redux";
// import React from "react";
// import { SafeAreaProvider } from "react-native-safe-area-context";
// import { store } from "./app/store";
// import MapScreen from "./screens/MapScreen";
// import OnboardingScreen from "./screens/OnboardingScreen";
// import OtpScreen from "./screens/OtpScreen";
// import ClientRegistrationForm from "./components/RegistrationForm";



// export default function App() {
//   return (
//     <Provider store={store}>
//       <NavigationContainer>
//          <TailwindProvider>
//           <SafeAreaProvider>
//             <KeyboardAvoidingView
//               behavior={Platform.OS === "ios" ? "padding" : "height"}
//               keyboardVerticalOffset={Platform.OS === "ios" ? -64 : 0}
//               style={{ flex: 1 }}
//             >
//               {/* <HomeNavigation /> */}
//               {/* <MapScreen/> */}
//               {/* <OnboardingScreen/> */}
//               {/* <OtpScreen/> */}
//               {/* <ClientRegistrationForm/> */}
            
//             </KeyboardAvoidingView>
//           </SafeAreaProvider>
//         </TailwindProvider>
//       </NavigationContainer>
//     </Provider>
//   );
// }



// ==============================================================================
// import React from 'react';
// import {View,Text} from 'react-native'
// import { NavigationContainer } from '@react-navigation/native'
// import { createNativeStackNavigator } from '@react-navigation/native-stack';
// import Splash from './screens/Splash';
// import Onboarding from './screens/Onboarding';
// import Login from './screens/Login';
// import OnboardingScreen from './screens/OnboardingScreen';


// const Stack = createNativeStackNavigator();
// const App = ()=>{
//   return (
//           <NavigationContainer>
//             <Stack.Navigator screenOptions={{headerShown:false}} >
              
//               <Stack.Screen name="Splash" component={Splash} />
//               <Stack.Screen name="OnboardingScreen" component={OnboardingScreen} />
//               <Stack.Screen name="Login" component={Login} />
//             </Stack.Navigator>
//           </NavigationContainer>
//   );
// }

// export default App


// =================================================================================
import React, { useState, createContext, useContext, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { View, ActivityIndicator } from 'react-native';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './config/firebase';
import Login from './screens/Login';
import Signup from './screens/Signup';
import Chat from './screens/Chat';
import Home from './screens/Home';

const Stack = createNativeStackNavigator();
const AuthenticatedUserContext = createContext({});

const AuthenticatedUserProvider = ({ children}) => {
  const [user, setUser] = useState(null);
return (
    <AuthenticatedUserContext.Provider value={{ user, setUser }}>
      {children}
    </AuthenticatedUserContext.Provider>
  );
};

function ChatStack() {
  return (
    <Stack.Navigator defaultScreenOptions={Home}>
      <Stack.Screen name='Home' component={Home} />
      <Stack.Screen name='Chat' component={Chat} />
    </Stack.Navigator>
  );
}

function AuthStack() {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      <Stack.Screen name='Login' component={Login} />
      <Stack.Screen name='Signup' component={Signup} />
    </Stack.Navigator>
  );
}

function RootNavigator() {
  const { user, setUser } = useContext(AuthenticatedUserContext);
  const [isLoading, setIsLoading] = useState(true);
useEffect(() => {
    // onAuthStateChanged returns an unsubscriber
    const unsubscribeAuth = onAuthStateChanged(
      auth,
      async authenticatedUser => {
        authenticatedUser ? setUser(authenticatedUser) : setUser(null);
        setIsLoading(false);
      }
    );
// unsubscribe auth listener on unmount
    return unsubscribeAuth;
  }, [user]);
if (isLoading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size='large' />
      </View>
    );
  }

return (
    <NavigationContainer>
      {user ? <ChatStack /> : <AuthStack />}
    </NavigationContainer>
  );
}

export default function App() {
  return (
    <AuthenticatedUserProvider>
      <RootNavigator />
    </AuthenticatedUserProvider>
  );
}
